name: Terraform Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      apply:
        description: 'Apply changes (or just plan)'
        type: boolean
        default: false

jobs:
  terraform:
    name: 'Terraform Deployment'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    env:
      TF_WORKSPACE: ${{ github.event.inputs.environment || 'dev' }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      # Setup Terraform with caching
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7
          terraform_wrapper: false
          
      # Authenticate with GCP
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          
      # Authenticate with AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      # Determine correct variable file based on environment
      - name: Set Terraform variables
        id: vars
        run: |
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          if [ "$ENV" == "dev" ]; then
            echo "tfvars_file=environments/dev.tfvars" >> $GITHUB_OUTPUT
            echo "provider=gcp" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "staging" ]; then
            echo "tfvars_file=environments/staging.tfvars" >> $GITHUB_OUTPUT
            echo "provider=gcp" >> $GITHUB_OUTPUT
          elif [ "$ENV" == "prod" ]; then
            echo "tfvars_file=environments/prod.tfvars" >> $GITHUB_OUTPUT
            echo "provider=gcp" >> $GITHUB_OUTPUT
          else
            echo "Invalid environment"
            exit 1
          fi
      
      # Initialize Terraform
      - name: Terraform Init
        id: init
        run: |
          cd infrastructure/terraform/${{ steps.vars.outputs.provider }}
          terraform init
      
      # Validate Terraform configurations
      - name: Terraform Validate
        id: validate
        run: |
          cd infrastructure/terraform/${{ steps.vars.outputs.provider }}
          terraform validate
      
      # Run Terraform Plan
      - name: Terraform Plan
        id: plan
        continue-on-error: true  # Continue even if there are changes
        run: |
          cd infrastructure/terraform/${{ steps.vars.outputs.provider }}
          terraform plan -var-file=${{ steps.vars.outputs.tfvars_file }} -out=tfplan -detailed-exitcode
          echo "exitcode=$?" >> $GITHUB_OUTPUT
      
      # Determine if changes are present
      - name: Check if changes exist
        id: changes
        run: |
          if [ ${{ steps.plan.outputs.exitcode }} -eq 2 ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "status_name=Apply" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "status_name=Validation" >> $GITHUB_OUTPUT
          fi
      
      # Show Terraform plan output
      - name: Plan Output
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          cd infrastructure/terraform/${{ steps.vars.outputs.provider }}
          terraform show -no-color tfplan
      
      # Apply Terraform changes if approved or auto-approved
      - name: Terraform Apply
        if: (github.event.inputs.apply == 'true' || github.ref == 'refs/heads/main') && steps.changes.outputs.has_changes == 'true'
        run: |
          cd infrastructure/terraform/${{ steps.vars.outputs.provider }}
          terraform apply -auto-approve tfplan
      
      # Notify on Slack success
      - name: Notify success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_TITLE: "Terraform ${{ steps.changes.outputs.status_name }} Successful"
          SLACK_MESSAGE: "Infrastructure changes for ${{ github.event.inputs.environment || 'dev' }} environment completed successfully"
      
      # Notify on Slack failure
      - name: Notify failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: danger
          SLACK_TITLE: "Terraform Deployment Failed"
          SLACK_MESSAGE: "Infrastructure deployment for ${{ github.event.inputs.environment || 'dev' }} environment failed"
