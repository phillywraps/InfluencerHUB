name: Production Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_server:
        description: 'Deploy server'
        type: boolean
        default: true
      deploy_client:
        description: 'Deploy client'
        type: boolean
        default: true
      deploy_mobile:
        description: 'Build mobile apps'
        type: boolean
        default: true

jobs:
  deploy_server:
    name: Deploy Server
    if: ${{ github.event.inputs.deploy_server != 'false' }}
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: 'server/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./server
        run: npm ci
        
      - name: Run tests
        working-directory: ./server
        run: npm test
        
      - name: Create production env file
        working-directory: ./server
        run: |
          touch .env.production
          echo "NODE_ENV=production" >> .env.production
          echo "PORT=5000" >> .env.production
          echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env.production
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.production
          echo "JWT_EXPIRES_IN=30d" >> .env.production
          echo "STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}" >> .env.production
          echo "STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}" >> .env.production
          echo "TIKTOK_CLIENT_KEY=${{ secrets.TIKTOK_CLIENT_KEY }}" >> .env.production
          echo "TIKTOK_CLIENT_SECRET=${{ secrets.TIKTOK_CLIENT_SECRET }}" >> .env.production
          echo "TIKTOK_REDIRECT_URL=${{ secrets.TIKTOK_REDIRECT_URL }}" >> .env.production
          echo "ALIPAY_APP_ID=${{ secrets.ALIPAY_APP_ID }}" >> .env.production
          echo "ALIPAY_PRIVATE_KEY=${{ secrets.ALIPAY_PRIVATE_KEY }}" >> .env.production
          echo "ALIPAY_PUBLIC_KEY=${{ secrets.ALIPAY_PUBLIC_KEY }}" >> .env.production
          echo "CRYPTO_API_KEY=${{ secrets.CRYPTO_API_KEY }}" >> .env.production
          echo "CRYPTO_API_SECRET=${{ secrets.CRYPTO_API_SECRET }}" >> .env.production
          echo "EMAIL_SERVICE=${{ secrets.EMAIL_SERVICE }}" >> .env.production
          echo "EMAIL_API_KEY=${{ secrets.EMAIL_API_KEY }}" >> .env.production
          echo "EMAIL_FROM=${{ secrets.EMAIL_FROM }}" >> .env.production
          echo "SENTRY_DSN=${{ secrets.SENTRY_DSN }}" >> .env.production
          echo "LOG_LEVEL=info" >> .env.production
          echo "SLACK_WEBHOOK=${{ secrets.SLACK_WEBHOOK }}" >> .env.production

      - name: Create PM2 ecosystem file
        working-directory: ./server
        run: |
          cat > ecosystem.config.js << 'EOL'
          module.exports = {
            apps: [
              {
                name: 'influencer-hub-api',
                script: 'server.js',
                instances: 'max',
                exec_mode: 'cluster',
                env_production: {
                  NODE_ENV: 'production',
                },
                max_memory_restart: '1G',
                error_file: '/var/log/influencer-hub/api-error.log',
                out_file: '/var/log/influencer-hub/api-out.log',
                log_date_format: 'YYYY-MM-DD HH:mm:ss',
                log_type: 'json',
              },
            ],
          };
          EOL

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            cd /var/www/influencer-hub/server
            git pull
            npm ci --production
            pm2 reload ecosystem.config.js --env production

      - name: Notify success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'good'
          SLACK_TITLE: 'Server Deployment Successful'
          SLACK_MESSAGE: 'The server has been successfully deployed to production'

      - name: Notify failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'danger'
          SLACK_TITLE: 'Server Deployment Failed'
          SLACK_MESSAGE: 'The server deployment to production has failed'

  deploy_client:
    name: Deploy Client
    if: ${{ github.event.inputs.deploy_client != 'false' }}
    runs-on: ubuntu-latest
    environment: production
    needs: deploy_server
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: 'client/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./client
        run: npm ci
        
      - name: Run tests
        working-directory: ./client
        run: npm test
        
      - name: Create env file
        working-directory: ./client
        run: |
          cat > .env.production << EOL
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
          REACT_APP_SOCKET_URL=${{ secrets.REACT_APP_SOCKET_URL }}
          REACT_APP_STRIPE_PUBLIC_KEY=${{ secrets.REACT_APP_STRIPE_PUBLIC_KEY }}
          REACT_APP_SENTRY_DSN=${{ secrets.REACT_APP_SENTRY_DSN }}
          REACT_APP_ENVIRONMENT=production
          EOL
          
      - name: Build client
        working-directory: ./client
        run: npm run build
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to S3
        working-directory: ./client
        run: aws s3 sync build/ s3://${{ secrets.AWS_S3_BUCKET }}/ --delete
        
      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
            
      - name: Notify success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'good'
          SLACK_TITLE: 'Client Deployment Successful'
          SLACK_MESSAGE: 'The client web app has been successfully deployed to production'
          
      - name: Notify failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'danger'
          SLACK_TITLE: 'Client Deployment Failed'
          SLACK_MESSAGE: 'The client web app deployment to production has failed'

  build_mobile_ios:
    name: Build iOS App
    if: ${{ github.event.inputs.deploy_mobile != 'false' }}
    runs-on: macos-latest
    environment: production
    needs: deploy_server
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: 'mobile/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci
        
      - name: Create env file
        working-directory: ./mobile
        run: |
          cat > .env.production << EOL
          API_BASE_URL=${{ secrets.MOBILE_API_URL }}
          SOCKET_URL=${{ secrets.MOBILE_SOCKET_URL }}
          STRIPE_PUBLIC_KEY=${{ secrets.MOBILE_STRIPE_PUBLIC_KEY }}
          SENTRY_DSN=${{ secrets.MOBILE_SENTRY_DSN }}
          EOL
          
      - name: Setup Ruby and Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
          
      - name: Install Fastlane
        working-directory: ./mobile/ios
        run: |
          gem install bundler:2.2.27
          bundle install

      - name: Install Cocoapods
        working-directory: ./mobile/ios
        run: |
          pod install
          
      - name: Setup iOS certificates and provisioning profiles
        working-directory: ./mobile/ios
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_CERTIFICATE_BASE64 }}
          IOS_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Decode the certificate and provisioning profile
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          echo -n "$IOS_PROVISION_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          
          # Create a keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate to keychain
          security import certificate.p12 -k build.keychain -P "$IOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # Install provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/
          
      - name: Build and upload to TestFlight
        working-directory: ./mobile/ios
        run: bundle exec fastlane beta
        env:
          FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
          FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
          FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          
      - name: Notify success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'good'
          SLACK_TITLE: 'iOS App Build Successful'
          SLACK_MESSAGE: 'The iOS app has been successfully built and uploaded to TestFlight'
          
      - name: Notify failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'danger'
          SLACK_TITLE: 'iOS App Build Failed'
          SLACK_MESSAGE: 'The iOS app build has failed'

  build_mobile_android:
    name: Build Android App
    if: ${{ github.event.inputs.deploy_mobile != 'false' }}
    runs-on: ubuntu-latest
    environment: production
    needs: deploy_server
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: 'mobile/package-lock.json'
          
      - name: Install dependencies
        working-directory: ./mobile
        run: npm ci
        
      - name: Create env file
        working-directory: ./mobile
        run: |
          cat > .env.production << EOL
          API_BASE_URL=${{ secrets.MOBILE_API_URL }}
          SOCKET_URL=${{ secrets.MOBILE_SOCKET_URL }}
          STRIPE_PUBLIC_KEY=${{ secrets.MOBILE_STRIPE_PUBLIC_KEY }}
          SENTRY_DSN=${{ secrets.MOBILE_SENTRY_DSN }}
          EOL
          
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
          
      - name: Setup Android keystore
        working-directory: ./mobile/android/app
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          echo -n "$ANDROID_KEYSTORE_BASE64" | base64 --decode > influencer_hub.keystore
          
      - name: Create keystore properties
        working-directory: ./mobile/android
        env:
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          cat > keystore.properties << EOL
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyPassword=$ANDROID_KEY_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          storeFile=influencer_hub.keystore
          EOL
          
      - name: Build AAB
        working-directory: ./mobile/android
        run: ./gradlew bundleRelease

      - name: Sign AAB
        uses: r0adkll/sign-android-release@v1
        id: sign_aab
        with:
          releaseDirectory: mobile/android/app/build/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          alias: ${{ secrets.ANDROID_KEY_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEY_PASSWORD }}
          
      - name: Upload to Google Play
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
          packageName: com.influencerhub.app
          releaseFiles: ${{ steps.sign_aab.outputs.signedReleaseFile }}
          track: internal
          status: completed
          
      - name: Notify success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'good'
          SLACK_TITLE: 'Android App Build Successful'
          SLACK_MESSAGE: 'The Android app has been successfully built and uploaded to Google Play'
          
      - name: Notify failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'danger'
          SLACK_TITLE: 'Android App Build Failed'
          SLACK_MESSAGE: 'The Android app build has failed'

  notify_deployment_complete:
    name: Notify Deployment Complete
    runs-on: ubuntu-latest
    needs: [deploy_server, deploy_client, build_mobile_ios, build_mobile_android]
    if: always()
    
    steps:
      - name: Check deployment status
        id: check
        run: |
          if [[ "${{ needs.deploy_server.result }}" == "success" && \
                "${{ needs.deploy_client.result }}" == "success" && \
                "${{ needs.build_mobile_ios.result }}" == "success" && \
                "${{ needs.build_mobile_android.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Notify success
        if: steps.check.outputs.status == 'success'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'good'
          SLACK_TITLE: 'Deployment Complete'
          SLACK_MESSAGE: 'All components have been successfully deployed to production'
          
      - name: Notify partial success/failure
        if: steps.check.outputs.status == 'failure'
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: 'warning'
          SLACK_TITLE: 'Deployment Partially Complete'
          SLACK_MESSAGE: 'Some components failed to deploy. Please check the GitHub Actions logs for details.'
