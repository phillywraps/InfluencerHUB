version: '3.8'

services:
  # Backend API server
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: influencerhub-server
    restart: unless-stopped
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
      - redis
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGO_URI=mongodb://mongodb:27017/influencer-platform
      - REDIS_URI=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - SLACK_WEBHOOK=${SLACK_WEBHOOK}
      - TIKTOK_CLIENT_KEY=${TIKTOK_CLIENT_KEY}
      - TIKTOK_CLIENT_SECRET=${TIKTOK_CLIENT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - ENABLE_RATE_LIMITING=true
      - ENABLE_XSS_PROTECTION=true
      - ENABLE_CSRF_PROTECTION=true
    volumes:
      - ./server/logs:/app/logs
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend web application
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:5000
        - REACT_APP_SOCKET_URL=ws://localhost:5000
    container_name: influencerhub-client
    restart: unless-stopped
    ports:
      - "3000:80" # Nginx serves on port 80 internally
    depends_on:
      - server
    networks:
      - app-network

  # MongoDB database
  mongodb:
    image: mongo:5
    container_name: influencerhub-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    networks:
      - app-network
    command: ["--auth", "--bind_ip_all"]
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo mongodb:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Redis for caching, rate limiting, and sessions
  redis:
    image: redis:6-alpine
    container_name: influencerhub-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB Admin UI (development only - disable in production)
  mongo-express:
    image: mongo-express
    container_name: influencerhub-mongo-express
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_ROOT_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=mongodb
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGO_EXPRESS_USER}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGO_EXPRESS_PASSWORD}
    depends_on:
      - mongodb
    networks:
      - app-network
    profiles:
      - dev # Only start in development mode

  # Nginx reverse proxy and load balancer (for production)
  nginx:
    image: nginx:alpine
    container_name: influencerhub-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - server
      - client
    networks:
      - app-network
    profiles:
      - prod # Only start in production mode

  # Let's Encrypt certificate manager (for production)
  certbot:
    image: certbot/certbot
    container_name: influencerhub-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    networks:
      - app-network
    profiles:
      - prod # Only start in production mode
    command: certonly --webroot -w /var/www/certbot --email admin@example.com -d example.com -d www.example.com --agree-tos --force-renewal

networks:
  app-network:
    driver: bridge

volumes:
  mongodb-data:
  redis-data:
